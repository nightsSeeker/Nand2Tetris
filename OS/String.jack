class String {
    field Array str;      // Stores the characters
    field int length;     // Current length
    field int maxLength;  // Maximum length allowed

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let maxLength = 1;
        }
        let str = Array.new(maxLength);
        let length = 0;
        let maxLength = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length < maxLength) {
            let str[length] = c;
            let length = length + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0) {
            let length = length - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val, i, d;
        var boolean neg;
        
        let val = 0;
        let i = 0;
        let neg = false;
        
        if ((length > 0) & (str[0] = 45)) { // Check for minus sign
            let neg = true;
            let i = 1;
        }
        
        while (i < length) {
            let d = str[i] - 48;  // Convert char to int
            if ((d < 0) | (d > 9)) {
                if (neg) {
                    return -val;
                }
                return val;
            }
            let val = (val * 10) + d;
            let i = i + 1;
        }
        
        if (neg) {
            return -val;
        }
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let length = 0;
        
        if (val < 0) {
            let val = -val;
            do appendChar(45);  // Add minus sign
        }
        
        do setIntHelper(val);
        return;
    }

    // Helper method for setInt
    method void setIntHelper(int val) {
        var int nextVal;
        var int lastDigit;
        
        let nextVal = val / 10;
        let lastDigit = val - (nextVal * 10);
        
        if (val < 10) {
            do appendChar(lastDigit + 48);
        }
        else {
            do setIntHelper(nextVal);
            do appendChar(lastDigit + 48);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}